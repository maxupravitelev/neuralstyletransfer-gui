{"version":3,"sources":["reducers/notificationReducer.js","styles.js","components/ImageUploader/ContentImage.js","components/ImageUploader/StyleImage.js","components/Notification.js","reducers/generatedImageReducer.js","services/images.js","components/ImageUploader/index.js","components/GeneratedImageDisplay.js","components/StatusBar/StatusLight.js","components/StatusBar/index.js","components/Header.js","App.js","store.js","index.js"],"names":["timeout","elevatedDivBase","padding","margin","backgroundColor","textAlign","borderWidth","width","styles","elevatedDiv","container","fileSelector","imagePreviewContainer","imagePreview","maxWidth","header","marginTop","statusBar","useStyles","makeStyles","ContentImage","handleChange","imageFormSet","image","classes","className","type","name","accept","id","style","display","onChange","htmlFor","contentImage","src","alt","Typography","Button","variant","component","StyleImage","styleImage","Notification","notification","useSelector","state","Alert","severity","notificationReducer","action","initialState","url","generatingMessage","getGeneratedImageUrl","generatedImageUrl","dispatch","data","setGeneratingMessage","generatedImageReducer","baseUrl","process","imagesService","getPingFromBackend","a","axios","get","ping","console","log","uploadImagesToBackend","target","FormData","config","headers","request","post","response","ImageUploader","useDispatch","useState","setImageFormSet","setImage","event","files","length","imageType","URL","createObjectURL","duration","clearTimeout","setTimeout","handleSubmit","preventDefault","returnedFilename","onSubmit","encType","GeneratedImageDisplay","generatedImage","imageGenerationState","StatusLight","setBackgroundColor","statusDescription","setStatusDescription","useEffect","checkState","styleCircle","borderRadius","height","marginRight","alighItems","StatusBar","Header","href","App","reducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f2356034.chunk.js","sourcesContent":["const notificationReducer = (state = '', action) => {\n  // console.log(state)\n  // console.log(action)\n\n  switch (action.type) {\n  case 'NOTIFICATION':\n    return action.notification\n\n  default:\n    return state\n  }\n}\n\nlet timeout\n\nexport const setNotification = (notification, duration, severity) => {\n  return dispatch => {\n\n\n    // possible severity levels in material ui: 'error', 'info', 'success', 'warning'\n    let notificationObj = {\n      notification,\n      severity\n    }\n\n    dispatch({\n      type: 'NOTIFICATION',\n      notification: notificationObj\n    })\n\n    const clearNotification = () => {\n      dispatch({\n        type: 'NOTIFICATION',\n        notification: null\n      })\n    }\n    //clear global timeout var from last func call\n    clearTimeout(timeout)\n    timeout = setTimeout(clearNotification, duration * 1000)\n\n  }\n}\n\nexport default notificationReducer\n\n","const elevatedDivBase = {\n  padding: '1.5em',\n  margin: '0.5em',\n  backgroundColor: '#FBFBFF',\n  textAlign: 'center',\n  borderWidth: '2px',\n  // border: 'solid gray',\n  // boxShadow: '2px 2px 5px 1px #1d1c1c;',\n  width: 'auto',\n  \n}\n\nexport const styles = {\n  elevatedDiv: elevatedDivBase,\n\n  container: {\n    // ...elevatedDivBase,\n    width: '500px',\n    margin: '0em auto 1em'\n    \n  },\n  \n  fileSelector: {\n    ...elevatedDivBase\n  },\n  imagePreviewContainer: {\n    ...elevatedDivBase,\n    backgroundColor: '#EEEEEE',\n    padding: '1em'\n\n  },\n  imagePreview: {\n    width: '100%',\n    maxWidth: \"450px\"\n  },\n  header: {\n    ...elevatedDivBase,\n    marginTop: \"10em\"\n  },\n  statusBar: {\n    ...elevatedDivBase,\n    // textAlign: \"left\",\n    // display: \"-webkit-box\"\n\n  }\n}","import React from 'react'\n\n// import material ui components & styles\nimport { Typography, Button } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/styles'\nimport { styles } from 'styles'\n\nconst useStyles = makeStyles(styles)\n\n\nconst ContentImage = ({ handleChange, imageFormSet, image }) => {\n\n  const classes = useStyles()\n\n    return (\n        <div className={classes.imagePreviewContainer}>\n            <input\n                type=\"file\"\n                name=\"contentImage\"\n                accept=\"image/*\"\n                id=\"contentImage\"\n                style={{ display: 'none' }}\n                onChange={handleChange}\n            />\n            <label htmlFor=\"contentImage\">\n                {imageFormSet.contentImage && (\n                    <img\n                        src={image.contentImage}\n                        alt=\"original\"\n                        className={classes.imagePreview}\n                    ></img>\n                )}\n                <p></p>\n                <Typography>\n                    Please choose a file you want to stylize\n                </Typography>\n                <Button variant=\"outlined\" component=\"span\">\n                    Upload\n                </Button>\n            </label>\n        </div>\n    )\n}\n\nexport default ContentImage\n","import React from 'react'\n\n// import material ui components & styles\nimport { Typography, Button } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/styles'\nimport { styles } from 'styles'\n\nconst useStyles = makeStyles(styles)\n\n\nconst StyleImage = ({ handleChange, imageFormSet, image }) => {\n\n  const classes = useStyles()\n\n  return (\n      <div className={classes.imagePreviewContainer}>\n      <input\n          type=\"file\"\n          name=\"styleImage\"\n          accept=\"image/*\"\n          id=\"styleImage\"\n          style={{ display: 'none' }}\n          onChange={handleChange}\n      />\n       \n      <label htmlFor=\"styleImage\">\n          {(imageFormSet.styleImage) &&\n          <img\n              src={image.styleImage}\n              alt=\"reference\"\n              className={classes.imagePreview}\n          ></img>\n          }\n          <Typography>\n              Please choose a style reference file\n          </Typography>\n          <Button variant=\"outlined\" component=\"span\">\n              Upload\n          </Button>\n      </label>\n\n  </div>\n    )\n}\n\nexport default StyleImage\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { Alert } from '@material-ui/lab'\n\n\nconst Notification = () => {\n  const notification = useSelector(state => state.notification)\n\n  if (notification) {\n    return (\n      <div>\n        <Alert severity={notification.severity}> \n          {notification.notification}\n        </Alert>\n      </div>\n    )\n  } else {\n    return (<div />)\n  }\n\n}\n\nexport default Notification","// import service for communication with backend\n// import imagesService from 'services/images'\n\nconst initialState = {\n    url: \"\",\n    generatingMessage: \"\"\n}\n\nconst generatedImageReducer = (state = initialState, action) => {\n    // console.log('state now: ', state)\n    // console.log('action', action)\n\n    switch (action.type) {\n        case 'GET_GENERATED_IMAGE_URL':\n            return {...state, url: action.data}\n        case 'SET_GENERATING_MESSAGE':\n            return {...state, generatingMessage: action.data}        \n        default:\n            return state\n    }\n}\n\nexport const getGeneratedImageUrl = (generatedImageUrl) => {\n\n    return dispatch => {\n\n        dispatch({\n            type: 'GET_GENERATED_IMAGE_URL',\n            data: generatedImageUrl,\n        })\n    }\n}\n\nexport const setGeneratingMessage = (generatingMessage) => {\n\n    return dispatch => {\n\n        dispatch({\n            type: 'SET_GENERATING_MESSAGE',\n            data: generatingMessage,\n        })\n    }\n}\n\n\nexport default generatedImageReducer","import axios from 'axios'\nimport FormData from 'form-data'\n\nconst baseUrl = process.env.REACT_APP_BACKEND_URL \nconst imageUrl = baseUrl + '/api/images'\n\n\nconst getPingFromBackend = async () => {\n  \n  try {\n    const ping = await axios.get(baseUrl)\n    return ping.data\n  } catch (error) {\n    console.log(error)\n    return \"error\"\n  }\n  \n}\n\n\nconst uploadImagesToBackend = async (target) => {\n  \n\n  const data = new FormData(target)\n\n  // data.append('styleImage', images.styleImage.file )\n\n//   for(const k of images){\n//     data.append('files',k.file, k.name);\n// }\n\n  const config = {\n    headers: { \n      // Authorization: token,\n      // \"Content-Type\": \"application/json\"\n      // 'Content-Type': 'multipart/form-data'\n      // 'accept': 'application/json',\n      // 'Accept-Language': 'en-US,en;q=0.8',\n      //'Access-Control-Allow-Origin': 'http://192.168.178.25:6475/api/images',\n      'Access-Control-Allow-Origin' : '*',\n      'Access-Control-Allow-Methods':'GET,PUT,POST,DELETE,PATCH,OPTIONS',\n      'Content-Type': `multipart/form-data`,\n    },\n    \n  }\n\n  const request = axios.post(imageUrl, data, config)\n\n  const response = await request\n  \n  return response.data\n}\n\nconst imagesService = { \n  getPingFromBackend,\n  uploadImagesToBackend\n}\n\nexport default imagesService","import React, { useState } from 'react'\n\nimport ContentImage from './ContentImage'\nimport StyleImage from './StyleImage'\n\n// import sending notifications\nimport Notification from 'components/Notification'\nimport { setNotification } from 'reducers/notificationReducer'\nimport { useDispatch } from 'react-redux'\n\nimport {\n    getGeneratedImageUrl,\n    setGeneratingMessage,\n} from 'reducers/generatedImageReducer'\n\n// import service for communication with backend\nimport imagesService from 'services/images'\n\n// import material ui components & styles\nimport { Button } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/styles'\nimport { styles } from 'styles'\n\nconst useStyles = makeStyles(styles)\n\n\nconst ImageUploader = () => {\n    const classes = useStyles()\n\n    const dispatch = useDispatch()\n\n    const [imageFormSet, setImageFormSet] = useState({\n        contentImage: false,\n        styleImage: false,\n    })\n\n    const [image, setImage] = useState({\n        contentImage: null,\n        styleImage: null,\n    })\n\n    const handleChange = (event) => {\n        if (event.target.files.length !== 0) {\n            const imageType = event.target.name\n            setImage({\n                ...image,\n                [imageType]: URL.createObjectURL(event.target.files[0]),\n            })\n\n            setImageFormSet({\n                ...imageFormSet,\n                [imageType]: true,\n            })\n\n            dispatch(setNotification(`${imageType} set`, 3, 'success'))\n        }\n    }\n\n    const handleSubmit = async (event) => {\n        event.preventDefault()\n\n        dispatch(\n            setGeneratingMessage(\n                'Image is being generated on the server. This might take a moment...'\n            )\n        )\n\n        const returnedFilename = await imagesService.uploadImagesToBackend(\n            event.target\n        )\n\n        const generatedOutputUrl =\n            process.env.REACT_APP_BACKEND_URL +\n            '/api/images/generated_output/?filename=' +\n            returnedFilename\n\n        dispatch(getGeneratedImageUrl(generatedOutputUrl))\n\n        dispatch(setGeneratingMessage(''))\n    }\n\n    return (\n        <form\n            onSubmit={handleSubmit}\n            className={classes.fileSelector}\n            encType=\"multipart/form-data\"\n        >\n            <Notification />\n            <ContentImage\n                handleChange={handleChange}\n                imageFormSet={imageFormSet}\n                image={image}\n            />\n            <StyleImage\n                handleChange={handleChange}\n                imageFormSet={imageFormSet}\n                image={image}\n            />\n            <div>\n                <Button type=\"submit\" variant=\"outlined\">\n                    GENERATE\n                </Button>\n            </div>\n        </form>\n    )\n}\n\nexport default ImageUploader\n","// import React from 'react' // , { useState }\nimport { useSelector } from 'react-redux'\n\n// import material ui components & styles\nimport {\n    Typography,\n    // Button\n} from '@material-ui/core'\nimport { makeStyles } from '@material-ui/styles'\nimport { styles } from 'styles'\n\n\nconst useStyles = makeStyles(styles)\n\nconst GeneratedImageDisplay = () => {\n    const classes = useStyles()\n\n    const generatedImageUrl = useSelector(state => state.generatedImage.url)\n\n    const imageGenerationState = useSelector(state => state.generatedImage.generatingMessage)\n\n    return (\n        <div className={classes.elevatedDiv}>\n            {generatedImageUrl && \n            <img\n                src={generatedImageUrl}\n                alt='generated content'\n                className={classes.imagePreview}\n            ></img>\n            }\n            <div>\n                <Typography>{imageGenerationState}</Typography>\n            </div>\n        </div>\n    )\n}\n\nexport default GeneratedImageDisplay\n","import React, { useEffect, useState } from 'react'\nimport { Typography } from '@material-ui/core'\n\nimport imagesService from 'services/images'\n\nconst StatusLight = () => {\n    const [backgroundColor, setBackgroundColor] = useState('red')\n    const [statusDescription, setStatusDescription] =\n        useState('Trying to reach server...')\n\n    // sent a ping request for waking up the backend when the frontend is loaded\n    useEffect(() => {\n        const checkState = async () => {\n            const sessionState = await imagesService.getPingFromBackend()\n\n            if (sessionState === 'ping') {\n                setBackgroundColor('green')\n                setStatusDescription('Server is online.')\n            } else {\n                setBackgroundColor('red')\n                setStatusDescription(\n                    'Server could not be reached. Please contact the admin.'\n                )\n            } \n        }\n        checkState()\n    }, [])\n\n    const styleCircle = {\n        backgroundColor: backgroundColor,\n        borderRadius: '50%',\n        height: '2em',\n        width: '2em',\n        display: 'inline-block',\n        margin: 'auto',\n        marginRight: 5,\n    }\n\n    return (\n        <div\n            style={{\n                // display: 'flex',\n                // marginTop: 30,\n                // marginBottom: 10,\n                alighItems: 'center',\n            }}\n        >\n            <div style={styleCircle}></div>\n            <Typography>{statusDescription}</Typography>\n        </div>\n    )\n}\n\nexport default StatusLight\n","import React from 'react'\n\nimport StatusLight from 'components/StatusBar/StatusLight'\n// import Notification from 'components/Notification'\n\n// import material ui components & styles\nimport { makeStyles } from '@material-ui/styles'\nimport { styles } from 'styles'\n\nconst useStyles = makeStyles(styles)\n\n\nconst StatusBar = () => {\n    const classes = useStyles()\n\n    return (\n        <div className={classes.statusBar}>\n            <StatusLight />\n            {/* <Notification /> */}\n        </div>\n    )\n}\n\nexport default StatusBar","import React from 'react'\n\n\n// import material ui components & styles\nimport { Typography } from '@material-ui/core'\nimport { makeStyles } from \"@material-ui/styles\"\nimport { styles } from '../styles'\n\nconst useStyles = makeStyles(styles)\n\n\nconst Header = () => {\n\n  const classes = useStyles()\n\n  return (\n    <div className={classes.header}>\n      <Typography variant=\"h4\" component=\"h2\">\n        Neural Style Transfer\n      </Typography>\n      <Typography \n        style={{ marginTop: \"0.5em\" }}\n      >Generate an image in the style of a reference image by utilizing <a href=\"https://www.tensorflow.org/tutorials/generative/style_transfer\">neural style transfer</a>.</Typography>\n    </div>\n  )\n}\n\nexport default Header","import React from 'react'\nimport './App.css'\n\nimport ImageUploader from 'components/ImageUploader/'\nimport GeneratedImageDisplay from 'components/GeneratedImageDisplay'\nimport StatusBar from 'components/StatusBar'\nimport Header from 'components/Header'\n\n// import material ui components & styles\nimport {\n    // Typography,\n    // Button\n} from '@material-ui/core'\nimport { makeStyles } from '@material-ui/styles'\nimport { styles } from 'styles'\n\nconst useStyles = makeStyles(styles)\n\n\nconst App = () => {\n\n    const classes = useStyles()\n\n\n    return (\n        <div className={classes.container}>\n            <Header />\n            <StatusBar />\n            <ImageUploader />\n            <GeneratedImageDisplay />\n        </div>\n    )\n}\n\nexport default App\n","import { createStore, combineReducers, applyMiddleware } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nimport thunk from 'redux-thunk'\n\nimport notificationReducer from 'reducers/notificationReducer'\nimport generatedImageReducer from 'reducers/generatedImageReducer'\n\n\nconst reducer = combineReducers({\n  notification: notificationReducer,\n  generatedImage: generatedImageReducer,\n})\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(\n    applyMiddleware(thunk)\n  )\n)\n\nexport default store","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\n// import redux for state handling\nimport { Provider } from 'react-redux'\nimport store from './store'\n\n\nReactDOM.render(\n    // <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>,\n    // </React.StrictMode>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}